стилизация с помощью селекторов(выбранных элементов или групп элементов на подключенной странице html, к которым будут применены css стили)
селекторы читаюся слева направо. пробел обозначает вложенность (в контейнер для элементов, например <nav> или header>..), его не используют при создании класса для элемента, не являющегося контейнером для других элементов(например:a.active{}, но:nav .active{}). 
при суммировании(слиянии) css-свойств из разных css=стилей элементу присвоится свойство из самого весомого css-стиля (вес css-стилей расчитывается суммированием селекторов в стиле, где каждый id селектор=100, class селектор=10, псевдокласс селектор=10, атрибут(неважно, со значением или без) селектор=10, а tag селектор=1), при суммировании одинаковых по весу стилей применится тот, что будет в коде самым нижним. 
(инлайновые стили(например: <p style="color: blue"></p>) всегда приоритетнее css-стилей, но их использовать нельзя, исключение- когда код html-документа меняется через JS, у JS нет возможности менять код css-документа)
(чтобы перебить свойство из более весомого стиля или из инлайнового стиля, можно добавить (в css-документе) в конце строки описания нужного свойства( color:red !important; )но так делать запрещено, только в самом крайнем случае, когда другими способами никак не перебить или как временный вариант)
(но! если добавить в инлайновый стиль !important (например:<p style="color: blue !important"></p> ), его перебить уже ничем невозможно., это самый весомый стиль, так делать точно никогда нельзя)
для подключения css-документа к html-документу нужно в html-документе в секции <head></head> добавить тег <link rel="stylesheet" href="style.css">

стилизация с помощью тегов:
a {
    color: green; (цвет: зеленый)
    text-decoration: none; (нижнее подчеркивание или др.: нет)
    text-transform: uppercase; (верхний регистр вкл)

}

распространение на все ссылки, вложенные в nav:
nav a {
    color: green;
}

распространение на разные селекторы:
h1, h2 {
    color: green;
}

селекторы по классу: 
(если нескольким разным классам нужно задать множество одинаковых свойств, тогда нужно сделать один общий класс с этими одинаковыми свойствами и др классы с различающимися свойствами, и прописывать в html документы тегам разные классы одновременно, например: <button class="button like">like</button>, <button class="button dislike">dislike</button>)
.link {
    color: green;
}
    +добавить соответствующий класс нужному элементу на странице html: 
<a href="/" class="link">Новинки</a>
<a href="/" class="link">ТОП 50</a>
<a href="#contacts" class="link">Контакты</a>

распространение на все ссылки c соответствующим классом, вложенные в nav: 
nav .link {
    color: green;
}
    +добавить соответствующий класс нужному элементу на странице html: 
<nav>
    <a href="/" class="link">Новинки</a>
    <a href="/" class="link">ТОП 50</a>
    <a href="#contacts" class="link">Контакты</a>
</nav> 
        или сделать стиль для ссылок класса navigation:
.navigation a {  
    color: green;
}
     +добавить соответствующий класс нужному элементу на странице html: 
<nav class="navigation">
    <a href="/">Новинки</a>
    <a href="/">ТОП 50</a>
    <a href="#contacts">Контакты</a>
 </nav>

элементам страницы html можно присваивать одновременно сколько угодно классов, они будут склеиваться между собой:
.link {
    color: green;
}
.active {
    background-color: red;
}
    +
<a href="/" class="link active">Новинки</a>
<a href="/" class="link">ТОП 50</a>
<a href="#contacts" class="link">Контакты</a>

распространение на класс active только в теге nav:
nav .active {
    color: green;
}

распространение на элементы с классом active, только вложенные в класс navigation:
.navigation .active {
    color: green;
}

распространение только на ссылки с классом active:
a.active {
    color: green;
}

распространение на элементы, которые имеют и класс active, и класс link: 
link.active {
    color: green;
}

распространение только на ссылки, которые имеют и класс active, и класс link:
a.link.active {
    color: green;
}

распространение на элементы только в контейнере nav, которые имеют и класс active, и класс link:
nav .link.active {
    color: green;
}

распространение только на те элементы в контейнере nav, которые находятся на превом уровне вложенности (не лежат в дополнительных контйнерах внутри контейнера nav) и имеют класс link:
nav > .link {
    color: green;
}

стилизация части текста с помощью контейнера <span></span>:
span {
    color: red;
}
    +добавить соответствующий класс нужному элементу на странице html: 
<p>
<span>Гарри Поттер и Филосовский Камень.</span> Однажды в темной лесу...
</p>
    разным контейнерам span на странице html можно присваивать свои классы, чтобы персонализировать стили для контейнеров span: 
.harry {
    color: green;
}
span {
    color: red;
}
+добавить соответствующие классы нужному элементу на странице html:
<p>
    Рейтинг фильма:<span>7/9</span>
</p>
<p>
<span class="harry">Гарри Поттер и Филосовский Камень.</span> Однажды в темной лесу...
</p>
или можно присвоить разные классы одинаковым тегам: 
.rating span {
    color: green;
}
.about span {
    color: red;
}
+добавить соответствующие классы нужному элементу на странице html:
<p class="rating">
    Рейтинг фильма:<span>7/9</span>
</p>
<p class="about">
<span>Гарри Поттер и Филосовский Камень.</span> Однажды в темной лесу...
</p>

распространение только на те <p></p>, которые стоят сразу после элементов, имеющих класс about:
.about + p {
    color: green;
}

распространение только на те <p></p>, которые стоят на одном уровне вложенности с элементами, имеющими класс about:
.about ~ p {
    color: green;
}

распространение только на те <p></p>, находящиеся в контейнерах div, которые стоят на одном уровне вложенности с элементами, имеющими класс about:
.about ~ div p {
    color: green;
}

стилизация через атрибуты тегов: 

распространение на теги, имеющие атрибут disabled:
[disabled] {
    color: green;
}

распространение на теги, имеющие атрибут только с определенным значением type="text" :
[type="text"] {
    color: green;
}

распространение только на определенный тег, имеющий атрибут только с определенным значением type="text" :
input[type="text"] {
    color: green;
}

распространение на теги <a>, имеющие атрибут href, начало и середина значения которого может быть любым, но заканчивается($) на ".com" :
a[href$=".com"] {
    color: green;
}

распространение на теги <a>, имеющие атрибут href, конец и середина значения которого может быть любым, но начинаются(^) на "https" :
a[href^="https"] {
    color: green;
}

распространение на теги <a>, имеющие атрибут href, значение которого может быть любым, но в середине(*) будет "google" :
a[href*="google"] {
    color: green;
}

распространение на теги <a>, имеющие атрибут class, значение которого может быть любым, но где то в тексте будет, разделенное от остальной части текста пробелами,(~) слово "ololo" (например: class:"kokoko ololo popopo"):
a[class~="ololo"] {
    color: green;
}

распространение на теги <a>, имеющие атрибут class, значение которого начинается со слова "ololo", после которого стоит дефис- (|) (например: class:"ololo-kokoko popopo"):
a[class|="ololo"] {
    color: green;
}

существует стилизация по id: 
(но такой способ крайне не рекомендуется, потому что такой способ имеет множество ограничений и потому как нельзя присваивать одинаковый id нескльким элементам)
#contacts {
    color: green;
}
+ присвоить соответсвующий id нужному элементу в html документе: 
<h2 id="contacts">Контакты:</h2>

также можно создавать css-стили не в отдельном документе css, а в контейнере для css-стилей <style></style> в html-документе в секции <head></head>(равновесны стилям из css-документа):
<head>
    ...
    <style>
        .active {
            color: blue;
        }
        nav a {
            color: red;
        }
    </style>
</head>



Псевдоклассы:

распространение на все теги <a> при наведении на них курсора мышки:
a:hover {
    color: pink;
}

распространение на все кнопки <button> при наведении на них курсора мышки:
button:hover {
    color: pink;
}

распространение на все ссылки <a> в активном состоянии(при зажатии курсора на ссылке):
a:active {
    color: pink;
}

распространение на все ссылки <a>, на которые уже заходили:
a:visited {
    color: pink;
}

распространение на все теги <h2> при переходе на них с помощью якорных ссылок (h2 id="contacts" + nav, a href="#contacts"):
h2:target {
    color: pink;
}

распространение на все инпуты в фокусе (при нажатии на поле или при выборе элементов через tab):
input:focus {
    background-color: pink;
}

распространение на всё в теге <form>, если один из его элементов в фокусе:
form:focus-within {
    background-color: pink;
}

распространение на все элементы типов: ссылки, кнопки, инпуты в фокусе (при нажатии на поле или при выборе элементов через tab):
:focus {
    background-color: pink;
}

распространение на первый <p> в <div>:
div p:first-child {
    color: red;
}

распространение на последний <p> в <div>:
div p:last-child {
    color: red;
}

распространение на четвертый <p> в <div>:
div p:nth-child(4) {
    color: red;
}

распространение на четвертый и пятый <p> в <div>:
div p:nth-child(4), div p:nth-child(5) {
    color: red;
}

распространение на все нечетные <p> в <div>:
div p:nth-child(odd) {
    color: red;
}

распространение на все четные <p> в <div>:
div p:nth-child(even) {
    color: red;
}

распространение на каждый третий <p> в <div>:
div p:nth-child(3n) {
    color: red;
}

распространение на все <p> в <div>, начиная с пятого:
div p:nth-child(n + 5) {
    color: red;
}

распространение на каждый второй <p> в <div>, начиная с пятого:
div p:nth-child(2n + 5) {
    color: red;
}

распространение на второй с конца(предпоследний) <p> в <div>:
div p:nth-last-child(2) {
    color: red;
}

распространение на все <p>, начиная с третьего и заканчивая предпоследним в <div>:
div p:nth-child(n + 3):nth-last-child(n + 2) {
    color: red;
}

распространение на любой первый элемент в <div>:
div :nth-child(1) {
    color: blueviolet;
}

распространение на первый <p>(первый по счету элемент по своему типу) в <div> вне зависимости от того, которым по счету элементом в <div> он является:
div p:nth-of-type(1) {
    color: blueviolet;
}

распространение на первый С КОНЦА <p>(первый по счету элемент по своему типу) в <div> вне зависимости от того, которым по счету элементом в <div> он является:
div p:nth-last-of-type(1) {
    color: blueviolet;
}

распространение на <p> <div>, если он является единственным элементом своего типа в своем родителе (в контейнере <div>) :
div p:only-of-type {
    color: blueviolet;
}

распространение на элемент с классом "link", если он является единственным элементом в своем родителе (в контейнере <div>):
div .link:only-child {
    color: blueviolet;
}

распространение на элемент с классом "block", если он является абсолютно пустым(не содержит в себе ни элементов, ни текста, ни пробелов, ни переноса строки, перенос строки для табуляции в этом случае нужно закоментить) :
.block:empty {
    color: blueviolet;
}

распространение на все ссылки, по которым еще не переходили:
a:link {
    color: blueviolet;
}

распространение на все елементы <p> c атрибутом lang="ua":
p:lang(ua) {
    color: blueviolet;
}

распространение на инпуты с атрибутом required(необходимый, обязательный для отправки формы):
input:required {
    background-color: red;
}

распространение на инпуты с атрибутом disabled(неактивный):
input:disabled {
    background-color: pink;
}

распространение на интпуты с атрибутом readonly или disabled :
input:read-only {
    background-color: pink;
}

распространение на активные интпуты (без атрибутов readonly или disabled):
input:read-write {
    background-color: pink;
}

распространение на все включенные инпуты (без атрибута disabled(неактивный)):
input:enabled {
    background-color: pink;
}

распространение на все инпуты кроме инпутов с class="ololo":
input:not(.ololo) {
    background-color: pink;
}

распространение на все включенные инпуты (без атрибута disabled(неактивный)) кроме инпутов с атрибутом type="number":
input:enabled:not([type="number"]) {
    background-color: pink;
}


распространение на инпуты c валидными значениями (в пределах min-max):
input:in-range {
    background-color: green;
}
распространение на инпуты c невалидными значениями (за пределами min-max):
input:out-of-range {
    background-color: coral;
}


распространение на валидные инпуты (проходящие html-валидацию):
input:valid {
    background-color: green;
}
распространение на невалидные инпуты (непроходящие html-валидацию):
input:invalid {
    background-color: coral;
}


для стилизации текста в инпутах radio и checkedbox: 
распространение на элемент small, являющийся соседом элементу input type="radio" (стоит сразу после элемента input на одном уровне вложенности), когда он находится в состоянии checked(выбран этот пункт):
input:checked + small {
    color: green;
}
при условии, что код html записан так: 
<input type="radio"...>
<small>Вариант1</small>
<input type="radio"...>
<small>Вариант2</small>


стилизация шрифтов(желательно подключать несколько шрифтов через запятую, чтобы, если первый шрифт по камким то причинам сломался, подключался следующий запасной шрифт): 
распространение на весь текст на странице:
body {
    font-family: 'Manrope', sans-serif;/* sans-serif; означает любой шрифт без засечек, последним в строке шрифтов обычно записывается название семейства шрифтов, если не сработают все ранее перечисленные шрифты*/
}
+создать классы для разной жирности шрифта: 
.weight-600 {
    font-weight: 600
}
.weight-700 {
    font-weight: 700
}
...
+ добавить в html-документ в секции head: 
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800&display=swap" rel="stylesheet">
 
второй вариант стилизации шрифтов - использование скаченных шрифтов. https://fonts.google.com/ выдает шрифты в устаревшем формате ttf, который нужно нужно конвертировать в формат c помощью сервиса https://transfonter.org/ (который работает только через vpn)
Дальше добавляем папку с шрифтами нужного формата в проэкт, переименовываем ее на fonts, в этой папке со шрифтами в документе берем файл stylessheet.css, переименовываем его на font.css и подключаем его к html-документу c помощью тега <link> 





стилизация по псевдоэлементам:: 

стилизация плейсхолдеров всех интпутов:
input::placeholder {
    color: aqua;
}

стилизация первой буквы текста:
.pseudo::first-letter {
    font-size: 30px;
    color: blue;
}

стилизация первой линии текста:
.pseudo::first-line {
    color: orange;
}

всегда первый элемент этого селектора (родителя), по умолчанию строчный элемент
.pseudo::before {
    content: "I am before";
    font-size: 40px;
    color: green;
}

всегда первый элемент этого селектора (родителя), по умолчанию строчный элемент
.pseudo::after {
    content: "I am after";
    font-size: 40px;
    color: red;
}

если значение контента в скобках оставить пустым, псевдоэлемент будет в коде, но он будет пустым
.pseudo::after {
    content: '';
    font-size: 40px;
    color: red;
}

чистка потока, улучщенный вариант (с помощью псевдоэлемента для контейнеров с классом клирфикс, в которых есть флоатные элементы)
.clearfix::after {
    content: '';
    display: block;
    clear: both;
}



стилизация по *(используем, когда нужно назначить всем элементам на страничке css-свойство, которое не нследуется): 
* {
    box-sizing::border-box;
}


/* 10*0:32:00 */
css-свойства:

div {
    padding: 10px 20px 30px 40px;  /*внутренний отступ верх 10px, справа 20px, снизу 30px, слева 40px*/
    padding: 10px 20px;  /*внутренний отступ верх 10px, справа 20px, снизу 10px, слева 20px*/
    padding: 10px;  /*внутренний отступ верх 10px, справа 10px, снизу 10px, слева 10px*/

    margin-bottom: 20px; /*нижний отступ от одного контейнера/элемента до другого контейнера/элемента 20px*/

    margin-left: auto;
        +               /*выравнивание по центру контента(внутренних элементов) по центру блочного элемента, работает при условии БЛОЧНОГО элемента с заданной width*/
    margin-right: auto;

    text-align: center; /*можно использовать для выравнивания инлайн-блоков, при этом данное css-свойство дается РОДИТЕЛЮ!*/

    box-sizing::content-box; /*значение по умолчанию-width(heith) элемента - это только ширина(высота) контента без учета внутренних отступов и границ - неудобно)*/
    box-sizing::border-box; /*width(heith) элемента - это сумма ширины(высоты) контента, ширины(высоты) внутренних отступов(padding) и ширины(высоты) границы(border)*/

    overflow-y: auto; /*если контент не вмещается по высоте(ось x -по ширине) в контейнер, то scroll добавит ползунок для прокрутки контента везде, auto добавит ползунок для скролла только там, где не помещается контент, hidden спрячет невместившийся контент*/

    display: none; /*скрывает элемент для отображения*/

        /*для картинок:*/
    width: 100%; /*чтобы вписать картинку в контейнер*/
    display: block; /*убирает стандартный отступ от кардинки (4px), для удобства*/
    object-fit: contain; /*сохраняет правильные соотношения сторон картинки, уменьшая ее*/
    object-fit: cover; /*сохраняет правильные соотношения сторон картинки, обрезая ее*/
    object-position: center; /*сохраняет правильные соотношения сторон картинки, обрезая ее, оставляя середину; top-оставляет верх; bottom; left; right;*/
    object-position: 0px -78px; /*ориентация обрезки - cдвиг по оси х, второе значение - сдвиг по оси y*/

        /*чтобы убрать отступы между инлайн-блоками вместо коментов в html-документе можно:*/
    font-size: 0; /*поставить в родительском для инлайн-блоков элементе*/
        +          
    font-size: 18; /*не забыть добавить инлайн-блокам(и другим элементам в родителе) нормаьный размер шрифта*/
}

/*чтобы отцентрировать весь контент на странице, нужно добавить всё в body в отдельный div и задать ему класс, 
например class="vrapper", и застилизовать этот класс следующим образом:*/
.wrapper {
    width: 1000px;
    margin-left: auto;
    margin-right: auto;
    
    border: 2px solid red; /*для удобства, чтобы видеть границы контейнера во время верстки*/
}

.float-box {
    float: left; (свойство, создающее  из разных элементов флоаты для сетки)
}
        если в родителе есть хоть один зафлоаченный элемент, то поток нужно чистить:
.clearfix {
    clear: left; (чистка потока - свойство, нужное пустому диву, созданному в родительском контейнере после флоатов, чтобы этот контейнер увидел флоаты. Если флоатам задано свойство float: right; тогда clear: left; /Если флоатам задано свойство float: left; тогда clear: right)
}


 
если нужно, чтобы определенное css-свойство унаследовалось от родителя, мы прописываем ему значение inherit (color: inherit;)

align-content	Выравнивание строчек резинового контейнера по вертикали.
align-items	Выравнивание содержимого строк резинового контейнера.
align-self	Выравнивание отдельных элементов внутри резинового контейнера.
all	Переопределяет значение всех свойств.
animation	Универсальное свойство, задающее сразу несколько параметров анимации.
animation-delay	Установка времени ожидания перед запуском цикла анимации.
animation-direction	Установка направления движения анимации.
animation-duration	Сколько времени требуется анимация на один цикл.
animation-fill-mode	Стиль для элемента, когда анимация не воспроизводится (когда она анимация окончена или имеет задержку)
animation-iteration-count	Сколько раз анимация должна повториться.
animation-name	Задает имя @keyframes для анимации
animation-play-state	Останавливает или запускает анимацию.
animation-timing-function	Тип ускорения анимации.
backface-visibility	Скрывает отражение элемента.
background	Универсальное свойство для всех свойств background
background-attachment	Определение поведения фонового изображения при прокрутке страницы.
background-blend-mode	Задает режим наложения нескольких фонов.
background-clip	Определяет, как фон должен выводиться под гранями.
background-color	Установка целостного цвета фона.
background-image	Указывает одно или несколько фоновых изображений.
background-origin	Определение позиции фона.
background-position	Указывает исходное положение (смещение) фонового изображения.
background-repeat	Способ повторения фона.
background-size	Указывает размер фона.
border	Универсальное свойство для всех параметров border.
border-bottom	Универсальное свойство для всех свойств border-bottom
border-bottom-color	Установка цвета нижней границы.
border-bottom-left-radius	Установка радиуса округления нижнего левого угла границы.
border-bottom-right-radius	Устанавливает радиус округления нижнего правого угла границы.
border-bottom-style	Установка стиля нижней границы.
border-bottom-width	Толщина нижней границы.
border-collapse	Устанавливает, должны ли границы таблицы схлопываться.
border-color	Установка цвета всех границ
border-image	Универсальное свойство для всех других свойств border-image-*
border-image-outset	Задает расстояние выхода изображения за границы.
border-image-repeat	Определяет, как будет повторяться изображение границы.
border-image-slice	Разделение изображения фона на части.
border-image-source	Задает изображение для границы элемента.
border-image-width	Задает толщину изображения для границы.
border-left	Универсальное свойство для всех свойств border-left
border-left-color	Установка цвета левой границы.
border-left-style	Установка стиля левой границы.
border-left-width	Задает толщину левой границы
border-radius	Универсальное свойство для всех свойств border-*-radius
border-right	Универсальное свойство для всех параметров border-right.
border-right-color	Установка цвета правой границы.
border-right-style	Устанавливает стиль правой границы.
border-right-width	Задает толщину правой границы.
border-spacing	Расстояние между границами соседних ячеек.
border-style	Стиль границы элемента.
border-top	Универсальное свойство для других свойств border-top
border-top-color	Установка цвета верхней границы.
border-top-left-radius	Радиус округления верхнего левого угла границы.
border-top-right-radius	Радиус округления верхнего правого угла границы.
border-top-style	Стиль верхней границы.
border-top-width	Толщина верхней границы.
border-width	Толщина границы.
bottom	Смещение относительно нижнего края.
box-decoration-break	Стилизация отдельных фрагментов элемента
box-shadow	Добавляет тень в элемент.
box-sizing	Задает алгоритм расчета ширины и высоты элемента.
break-after	Как должны вести себя разрыв после генерации контейнера
break-before	Вынуждает разбивать на несколько столбцов макет.
break-inside	Определение состояния перерывов в контейнере.
caption-side	Определение размещения заголовка таблицы.
clear	Устанавливает, с какой стороны элемента запрещено его обтекание другими элементами.
clip	Задает область позиционированного элемента, в которой будет показано его содержимое.
color	Задает цвет текста и его украшение
column-count	Количество колонок в на которые должен быть разделен элемент.
column-fill	Способ заполнения столбиков в многоколоночном тексте.
column-gap	Промежуток между колонками.
column-rule	Определение свойств линии между колонками.
column-rule-color	Указывает цвет линии.
column-rule-style	Определение вида линии.
column-rule-width	Толщина линии между колонками
columns	Ширина и количество колонок в многоколоночном тексте.
column-span	Сколько колонок должен занимать элемент
column-width	Ширина столбика в многоколонковом тексте.
content	Изменение содержимого элемента после формирования страницы.
counter-increment	Увеличивает один или несколько счетчиков.
counter-reset	Создает или сбрасывает один или несколько счетчиков
cursor	Определяет тип курсора, который будет отображаться
direction	Определение направления текста/направление ввода текста
display	Тип блока для HTML-элемента.
empty-cells	Скрывает в таблице пустые ячейки.
filter	Художественные эффекты.
flex	Размер резиновых элементов.
flex-basis	Начальная длина флекса элемента.
flex-direction	Направление разрешения гибких элементов.
flex-flow	Сокращенное свойство для свойств flex-direction и flex-wrap.
flex-grow	Коэффициент увеличения гибкого элемента.
flex-shrink	Коэффициент сжатия флексов в контейнере.
flex-wrap	Способ сноса гибких элементов.
float	Определяет, по какой стороне элемент будет выравниваться, при этом другие элементы будут обтекать его с других сторон. Блочные элементы не видят флоаты, но текст в блочных элементах распознает флоаты и обтекает их.
font	Универсальное свойство для всех других свойств
font-face	Загрузка собственного шрифта
font-family	Задает семейство шрифта.
font-feature-settings	Контроль над функциями OpenType.
font-feature-values	Позволяет использовать общее название в свойстве font-variant-alternates для функций, активизированных по-разному в OpenType.
font-kerning	Изменение интервала между глифами.
font-language-override	Позволяет управлять использованием конкретных глифов для конкретного языка.
font-size	Размер текста.
font-size-adjust	Сохраняет читаемость текста при использовании резервного шрифта
font-stretch	Устанавливает вид шрифта
font-style	Стиль шрифта.
font-synthesis	Синтез шрифта, когда для этой цели он не имеет специального глифа.
font-variant	Контроль стилистических функций шрифтов.
font-variant-alternates	Позволяет управлять выбором альтернативных глифов
font-variant-caps	Альтернативные глифы для маленьких букв.
font-variant-east-asian	Замещение глифов в восточноазиатских текстах.
font-variant-ligatures	Управление лигатурами в шрифте
font-variant-numeric	Стиль отображения чисел на странице
font-variant-position	Введение индексов глифов
font-weight	Толщина шрифта
grid	Универсальное свойство для настройки сетки
grid-area	Расположение, а также имя элементов сетки
grid-auto-columns	Определение размера неявно созданных столбиков сетки.
grid-auto-flow	Определяет, как работает алгоритм автоматического размещения
grid-auto-rows	Определение размера неявно созданных строк сетки.
grid-column	Указывает размер и расположение элемента в строке сетки
grid-column-end	Определяет конечный столбец расположения элемента в сетке
grid-column-gap	Установка отступов между столбиками сетки.
grid-column-start	Определение исходного столбца расположения элемента в сетке
grid-gap	Указывает размер желобов между строками и столбцами сетки.
grid-row	Указывает размер и расположение элемента в строке сетки
grid-row-end	Определяет конечную строку расположения элемента в сетке
grid-row-gap	Установка отступов между строками сетки
grid-row-start	Определение исходной строки расположения элемента в сетке
grid-template	Сокращенная запись определения столбцов, строк и областей сетки
grid-template-areas	Определение названий сетевых областей
grid-template-columns	Определение размеров столбцов
grid-template-rows	Определение размеров строк
hanging-punctuation	Могут знаки препинания за пределами строки.
height	Установка высоты элемента
hyphens	Уведомляет браузер, как расставлять переносы слов в блоке текста.
ime-mode	Контроль состояния редактора методов ввода (IME) для текстовых полей
justify-content	Выравнивает элементы гибкого контейнера по горизонтали.
keyframes	Установка ключевых кадров при анимации элемента.
left	Отступление от левого края родительского элемента.
letter-spacing	Определяет интервал между символами внутри элемента.
line-break	Определение способа или возможности прерывания строк
line-height	Указывает минимальную высоту строки текста.
list-style	Задает главные характеристики перечня.
list-style-image	Установка изображения вместо метки списка.
list-style-position	Размещение метки списка в отношении текста
list-style-type	Тип метки списка.
margin	Наружное отступление.
margin-bottom	Наружный отступ снизу.
margin-left	Наружный отспуп слева.
margin-right	Наружное отступление справа.
margin-top	Наружное отступление сверху.
marks	Отображает специальные метки на странице при печати документа
max-height	Максимально допустимая высота элемента.
max-width	Максимально допустимая ширина элемента.
min-height	Минимально допустимая высота элемента.
min-width	Установка минимальной ширины элемента.
nav-down	Указывает, где для навигации используется клавиша со стрелкой вниз
nav-index	Определяет порядок табуляции для элемента
nav-left	Указывает, где для навигации используется клавиша со стрелкой влево
nav-right	Указывает, где для навигации используется клавиша со стрелкой вправо
nav-up	Указывает, где для навигации используется клавиша со стрелкой вверх
opacity	Прозорость html-элементов
order	Сортировка гибких элементов.
orphans	Минимальное количество строк в контейнере, которые нужно оставить во фрагменте перед перерывом фрагментации
outline	Наружный контур вокруг элемента.
outline-color	Элементы цвета контура.
outline-offset	Расстояние между контуром и краем элемента.
outline-style	Стиль контура элемента.
outline-width	Толщина контура элемента.
overflow	Поведение переполненного элемента.
overflow-wrap	Указывает, переносить или нет длинных слов, которые не помещаются по ширине в заданную область.
overflow-x	Поведение элемента переполненного по горизонтали.
overflow-y	Поведение элемента переполненного по вертикали.
padding	Отступы вокруг содержимого элемента.(расстояние от границ контейнера до его контента)
padding-bottom	Внутреннее отступление снизу.
padding-left	Внутреннее отступление слева.
padding-right	Внутреннее отступление справа.
padding-top	Внутреннее отступление сверху.
page-break-after	Добавляет разрыв страницы при печати документа после заданного элемента
page-break-before	Добавляет разрыв страницы при печати документа перед заданным элементом.
page-break-inside	Добавляет разрыв страницы при печати документа внутри заданного элемента.
perspective	Указывает, как 3D-элементы будут выглядеть в перспективе
perspective-origin	Определение нижней позиции 3D-элементов
position	Тип позиционирования элемента.
quotes	Указывает тип кавычек для цитат.
resize	Позволяет изменять размеры элемента.
right	Отступление от правого края родительского элемента.
table-layout	Задает метод формирования макета таблицы.
tab-size	Определение длины табуляции.
text-align	Горизонтальное выравнивание текста.
text-align-last	Выравнивание последней строки текста.
text-combine-upright	Указывает комбинацию нескольких символов на пространство одного
text-decoration	Отделка текста.
text-decoration-color	Цвет украшения текста.
text-decoration-line	Декоративная линия позиции.
text-decoration-style	Стиль декоративной линии.
text-indent	Отступление первой строчки.
text-justify	Способ выравнивания текста выровнен по ширине.
text-orientation	Ориентация текстовых символов в строке
text-overflow	Обрезка текста, выходящего за пределы элемента.
text-shadow	Добавляет тень в текст.
text-transform	Изменение регистра букв в тексте.
text-underline-position	Позиционирование подчеркивания
top	Отступ от верхнего края.
transform	2D или 3D трансформации элемента.
transform-origin	Координаты точки, в отношении которой будет происходить трансформация.
transform-style	Отображение вложенных элементов в 3D-пространстве.
transition	Установка эффекта перехода между двумя состояниями элемента.
transition-delay	Установка времени ожидания перед запуском эффекта перехода.
transition-duration	Продолжительность эффекта перехода.
transition-property	Установка имени стилевого свойства.
transition-timing-function	Ускорение эффекта трансформации.
unicode-bidi	Направление отображения слов в тексте.
user-select	Может ли пользователь выделять курсором текст на странице
vertical-align	Вертикальное выравнивание элемента.
visibility	Делает элемент невидимым.
white-space	Устанавливает, как отображать пробелы между словами.
widows	Минимальное количество строк текста, который размещается на следующей странице во время печати документа
width	Установка ширины элемента
word-break	Тип переноса слов.
word-spacing	Установка интервала между словами.
word-wrap	Указывает, переносить или нет длинные слова.
writing-mode	Устанавливает направление текста на странице – по горизонтали или вертикали.
z-index	Устанавливает порядок элементов на z-оси.




    Родной стиль. Normalize.css Reset.css

Скопировать стили с сайта, добавить в отдельно созданный css-документ, соответствующе назвать и подключить к html-документу.
Подключается в самом начале проэкта!
Нельзя использовать одновременно Normalize.css и Reset.css!

Reset.css https://meyerweb.com/eric/tools/css/reset/
Normalize.css https://necolas.github.io/normalize.css/





/*Слова, часто используемые в CSS-классах

Изображения
image, img, picture, pic — картинка
icon — иконка
logo — логотип
userpic, avatar — юзерпик, маленькая картинка пользователя
thumbnail, thumb — миниатюра, уменьшенное изображение

Текст
title, subject, heading, headline, caption — заголовок
subtitle — подзаголовок
slogan — слоган
lead, tagline — лид-абзац в тексте
text — текстовый контент
desc — описание, вариант текстового контента
excerpt — отрывок текста, обычно используется перед ссылкой «Читать далее...»
quote, blockquote — цитата
snippet — пример кода
link — ссылка
copyright, copy — копирайт

Списки
list, items — список
item — элемент списка

Блоки
page — корневой элемент страницы
header — шапка (страницы или элемента)
footer — подвал (страницы или элемента)
section — раздел контента (один из нескольких)
main, body — основная часть (страницы или элемента)
content — содержимое элемента
sidebar — боковая колонка (страницы или элемента)
aside — блок с дополнительной информацией
widget — виджет, например, в боковой колонке

Раскладка
wrapper, wrap — обёртка, обычно внешняя
inner — внутренняя обёртка
container, holder, box — контейнер
grid — раскладка (страницы или элемента) в виде сетки (обычно содержит в себе row и col)
row — контейнер в виде строки
col, column — контейнер в виде столбца

Элементы управления
button, btn — кнопка, например, для отправки формы
control — элемент управления, например, стрелки «Вперёд/назад» в фотогалерее, кнопки управления слайдером
dropdown — выпадающий список

Медиавыражения
phone, mobile — мобильные устройства
phablet — телефоны с большим экраном (6-7")
tablet — планшеты
notebook, laptop — ноутбуки
desktop — настольные компьютеры

Размеры
tiny, xs — маленький, крохотный
small, sm — небольшой
medium, base — средний
big, large, lg — большой
huge, xl — огромный
narrow — узкий
wide — широкий

Разное
search — поиск
socials — блок иконок соцсетей
advertisement, adv, commercial, promo — рекламный блок (режутся Адблоком, не рекомендуется использовать такие классы для блоков с внутренней рекламой)
features, benefits — список основных особенностей товара, услуги
slider, carousel — слайдер, интерактивный элемент с прокруткой содержимого
pagination — постраничная навигация
user, author — пользователь, автор записи или комментария
meta — блок с дополнительной информацией, например, блок тегов и даты в посте
cart, basket — корзина
breadcrumbs — навигационная цепочка, «хлебные крошки»
more, all — ссылка на полную информацию
modal — модальное (диалоговое) окно
popup — всплывающее окно
tooltip, tip — всплывающее подсказки
preview — анонс, отрывок, например новости или поста, может состоять из заголовка, описания и картинки. Предполагается ссылка на полную версию
overlay — перекрывающий слой, например, для затемнения изображений или создания модальных окон

Состояния
active, current — активный элемент, например, текущий пункт меню
visible — видимый элемент
hidden — скрытый элемент
error — статус ошибки
warning — статус предупреждения
success — статус успешного выполнения задачи
pending — состояние ожидания, например, перед сменой статуса на error или success*/







работа с проэктом::
1)подключение Normalize.css или Reset.css

2)* {
    box-sizing: border-box;
}

3).wrapper {
    width: px;
    margin-left: auto;
    margin-right: auto;
}

5)создание header

6)создание main, разбитое на section, разбитые на div

7)создание footer




-изображения скачиваем в формате png(с прозрачным фоном) либо jpg(с фоном заданного цвета)
-для ссылки с картинками делаем инлайн-блоками
-размеры изображений записываем и в html, и в css
-прозрачный бэкграунд - background-color: transparent;
-вписываем картинку в бэкграунд - background-size: cover; или background-size: contain;
-при использовании background-image всегда на всякий пожарный добавляем и background-color на случай, если картинка не загрузится
-кнопкам и ссылкам в виде кнопок добавлять свойство инлайн блок и центрировать текст в них с помощью line-height:(=height);





блочные элементы: div, section, h1, p, ...
строчные элементы: span, a, q, code,..